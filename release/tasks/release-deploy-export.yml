---
# The boshness

- name: boshlite checkout
  sudo: true
  git: repo=https://github.com/cloudfoundry/bosh-lite.git
       dest=/opt/boshlite depth=1

- name: fix ownership for bosh-lite
  sudo: true
  command: chown -R ubuntu:ubuntu /opt/boshlite

- name: fetch spiff
  sudo: true
  get_url: url=https://github.com/cloudfoundry-incubator/spiff/releases/download/v1.0/spiff_linux_amd64.zip dest=/opt/spiff.zip

- name: unzip spiff
  sudo: true
  command: unzip /opt/spiff.zip chdir=/usr/bin creates=/usr/bin/spiff

- name: cf-release checkout
  sudo: true
  git: repo=https://github.com/cloudfoundry/cf-release.git
       version=v{{rel}}
       dest=/opt/cf-release
  register: cf_checkout

- name: fix ownership for cf-release
  sudo: true
  command: chown -R ubuntu:ubuntu /opt/cf-release

- name: fix ownership for packages
  sudo: true
  command: chown -R ubuntu:ubuntu {{workdir}}

- include: cf-submodules.yml
  when: cf_checkout.changed

- name: install bosh cli
  gem: name=bosh_cli state=latest

- name: bosh config
  sudo: true
  file: path=/home/ubuntu/.bosh_config owner=ubuntu group=ubuntu

- name: target bosh locally
  shell: "{{bp}} bosh target localhost
         executable=/bin/bash"

- name: check stemcell count
  shell: "{{bp}} bosh stemcells executable=/bin/bash"
  register: stemcells
  ignore_errors: true

- name: upload stemcell to bosh
  shell: "{{bp}} bosh upload stemcell {{stemcell_uri}}
         executable=/bin/bash"
  when: stemcells.rc == 1
  async: 6000
  poll: 30

- name: check releases
  shell: "{{bp}} bosh releases | grep '| cf.*| {{rel}}' -c
          executable=/bin/bash"
  register: howmany_rel
  ignore_errors: true

- set_fact:
    uploaded_release_cnt: "{{howmany_rel.stdout}}"

- set_fact:
    do_upload_release: "{{uploaded_release_cnt | int < 2}}"

- name: set perms
  sudo: true
  file: path=/var/vcap/data/tmp owner=ubuntu group=ubuntu

- name: upload release to bosh
  shell: "{{bp}} TMPDIR={{tmpdir}} bosh upload release releases/cf-{{rel}}.yml
         chdir=/opt/cf-release
         executable=/bin/bash"
  when: do_upload_release | bool
  async: 1800
  poll: 40
  ignore_errors: true
  register: release_upload

- set_fact:
    already_uploaded: "{{release_upload.stderr == 'This release version has already been uploaded' or release_upload.rc == 0}}"

- fail: msg="release {{rel}} failed to upload"
  when: not already_uploaded | bool

- name: spiff up manifest
  shell: "{{bp}} ./bin/make_manifest_spiff
         chdir=/opt/boshlite
         executable=/bin/bash"

- name: upload manifest
  shell: "{{bp}} bosh deployment /opt/boshlite/manifests/cf-manifest.yml
          executable=/bin/bash"

- name: check for deployment
  shell: "{{bp}} bosh deployments | grep 'cf/{{rel}}' -c executable=/bin/bash"
  register: number_of_deployments_sh
  ignore_errors: true

- set_fact:
    number_of_deployments: "{{number_of_deployments_sh.stdout | default(0)}}"

- set_fact:
    deployed: "{{number_of_deployments | int > 0}}"

- name: run deploy
  shell: "{{bp}} bosh -n deploy executable=/bin/bash"
  async: 2400
  poll: 50
  when: not deployed | bool
  ignore_errors: true
  register: deploy_result

- name: run export
  shell: "{{bp}} bosh export compiled_packages cf/{{rel}} {{stemcell_name}} {{workdir}}
         executable=/bin/bash"
  async: 600
  poll: 50

# hack around deploy issues
- name: grab name of export
  shell: ls -1 {{tmpdir}}/director/compiled_packages | tail -1
  register: cpcname

- set_fact:
    cpc_tgz: "{{cpcname.stdout}}"